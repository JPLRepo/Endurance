// Add to Pathfinder templates
@PATH_ENDURCMD[EnduranceHab]:NEEDS[Pathfinder,SnacksUtils]
{
	MODULE
	{
		name = SoilRecycler
		ConverterName = Soil Recycler
		StartActionName = Start Soil Recycler
		StopActionName = Stop Soil Recycler
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = true
		SpecialistEfficiencyFactor = 0.2
		UseSpecializationBonus = true
		SpecialistEfficiencyFactor = 0.1
		ExperienceEffect = ScienceSkill
		EfficiencyBonus = 1.0
		RecyclerCapacity = 6
	 
		INPUT_RESOURCE
		{
			ResourceName = Soil
			Ratio = 0.000034723
			FlowMode = ALL_VESSEL
  		}

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 18
		}

		OUTPUT_RESOURCE
		{
			ResourceName = Snacks
			Ratio = 0.000034723
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
	}
	MODULE:NEEDS[SnacksStress]
	{
		name = SnacksConverter
		ConverterName = Entertainment Center
		StartActionName = Start Entertainment
		StopActionName = Stop Entertainment
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = false
		
		//At least one crew needs to be in the part to run the converter.
		minimumCrew = 1

		//Connection back home required to receive entertainment.
		requiresHomeConnection = true

		//This condition is set whenever the kerbal enters the part and the converter is active, and
		//when the converter is started. Since it's registered as a SKILL_LOSS_CONDITION, the kerbals will lose their
		//skills while the converter is running.
		conditionSummary = Relaxing

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 0.4
			FlowMode = ALL_VESSEL
		}

		//Works like an INPUT_RESOURCE except:
		// It applies to individual kerbals.
		// You can specify an AmountPerDay or AmountPerSecond.
		ROSTER_INPUT_RESOURCE
		{
			ResourceName = Stress

			//AmountPerDay will be translated into: AmountPerDay / seconds per homeworld day
			//This will override AmountPerSecond if it is defined in the node.
			AmountPerDay = 2
		}
	}
	RESOURCE:NEEDS[SnacksFreshAir]
	{
		name = StaleAir
		amount = 0
		maxAmount = 40
	}
	RESOURCE:NEEDS[SnacksFreshAir]
	{
		name = FreshAir
		amount = 100
		maxAmount = 100
	}
	RESOURCE
	{
		name = Soil
		amount = 0
		maxAmount = 100
		isTweakable = false
	}
}
@PATH_ENDURHAB[Prairie]:NEEDS[Pathfinder,SnacksUtils]
{
	MODULE
	{
		name = SnacksConverter
		ConverterName = Greenhouse
		StartActionName = Start Grenhouse
		StopActionName = Stop Greenhouse
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = true
		SpecialistEfficiencyFactor = 0.2
		ExperienceEffect = ScienceSkill
		EfficiencyBonus = 1
		hoursPerCycle = 540 //Number of hours to grow crops
		minimumSuccess = 1
		criticalSuccess = 90
		criticalFail = 5
		criticalSuccessBonus = 0.25
		failureLoss = 0.25
		INPUT_RESOURCE
		{
			ResourceName = Water
			Ratio = 0.001093750
		}
		INPUT_RESOURCE
		{
			ResourceName:NEEDS[ClassicStock] = Compost
			ResourceName:NEEDS[!ClassicStock] = Fertilizer
			Ratio = 0.000364583
		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 12
		}
		OUTPUT_RESOURCE:NEEDS[SnacksFreshAir]
		{
			ResourceName = FreshAir
			Ratio = 0.00405
		}
		//Calibrated for 1 snack per meal, 3 meals per day
		//Supports 10 kerbals
		YIELD_RESOURCE
		{
			ResourceName = Snacks
			Ratio = 2700
		}
	}
	MODULE:NEEDS[SnacksFreshAir]
	{
		name = SnacksConverter
		ConverterName = Air Scrubber
		StartActionName = Start Air Scrubber
		StopActionName = Stop Air Scrubber
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = false
		INPUT_RESOURCE
		{
			ResourceName = StaleAir
			Ratio = 0.00074
			FlowMode = ALL_VESSEL
		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 0.4
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = FreshAir
			Ratio = 0.000296
			FlowMode = ALL_VESSEL
		}
	}
}

// Without Pathfinder
@PART[ENinfirmaryEndurance|ENdeployableLab]:NEEDS[SnacksUtils,!Pathfinder]
{
	MODULE
	{
		name = SnackProcessor
		ConverterName = Snack Processor
		StartActionName = Start Snack Processor
		StopActionName = Stop Snack Processor
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = true
		UseSpecializationBonus = true
		SpecialistEfficiencyFactor = 0.1
		ExperienceEffect = ScienceSkill
		EfficiencyBonus = 1.0
		 
		//Ore masses 0.01 metric tons per unit
		INPUT_RESOURCE
		{
			ResourceName = Ore
			Ratio = 0.002
			FlowMode = STAGE_PRIORITY_FLOW
  		}

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 30
			FlowMode = STAGE_PRIORITY_FLOW
		}

		//Snacks masses 0.001 metric tons per unit
		//1 Ore = 5 Snacks, not all of the ore is usable...
		OUTPUT_RESOURCE
		{
			ResourceName = Snacks
			Ratio = 0.001
			DumpExcess = false
			FlowMode = STAGE_PRIORITY_FLOW
		}
	}

	//Because we are directly monitoring converters,
	//ModuleQualityControl has to appear in the config
	//AFTER all the converters in the part.
	MODULE:NEEDS[BARIS]
	{
		name = ModuleQualityControl
		quality = 65
		mtbf = 100 
		monitorConverters = true //WARNING: this is a performance hit.
	}
}
@PART[ENhabEndurance]:NEEDS[SnacksUtils,!Pathfinder]
{
	MODULE
	{
		name = SoilRecycler
		ConverterName = Soil Recycler
		StartActionName = Start Soil Recycler
		StopActionName = Stop Soil Recycler
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = true
		ExperienceEffect = ConverterSkill
		EfficiencyBonus = 1.0
		RecyclerCapacity = 4
	 
		INPUT_RESOURCE
		{
			ResourceName = Soil
			Ratio = 0.00004630
			FlowMode = ALL_VESSEL
  		}

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 3
			FlowMode = STAGE_PRIORITY_FLOW
		}

		OUTPUT_RESOURCE
		{
			ResourceName = Snacks
			Ratio = 0.00004630
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
	}
}
@PART[ENrangerBody|ENlanderBody|ENminiRanger]:NEEDS[SnacksUtils]
{
	MODULE
	{
		name = SnacksConverter // 50% of default ratios
		ConverterName = Air Maker
		StartActionName = Start Air Maker
		StopActionName = Stop Air Maker
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = true
		ExperienceEffect = ConverterSkill
		EfficiencyBonus = 1.0
		INPUT_RESOURCE
		{
			ResourceName = Oxidizer
			Ratio = 0.05
			FlowMode = ALL_VESSEL
  		}
		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 1.5
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = FreshAir
			Ratio = 0.05
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
	}
}
@PART:HAS[#manufacturer[Brand?Aerospace?Engineering],#CrewCapacity[>0]]:NEEDS[SnacksFreshAir]
{
	MODULE
	{
		name = SnacksConverter
		ConverterName = Air Scrubber
		StartActionName = Start Air Scrubber
		StopActionName = Stop Air Scrubber
		AutoShutdown = false
		GeneratesHeat = false
		UseSpecialistBonus = false
		
		INPUT_RESOURCE
		{
			ResourceName = StaleAir
			Ratio = 0.000185
			@Ratio *= #$../../CrewCapacity$
			FlowMode = ALL_VESSEL
		}

		INPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 0.1
			@Ratio *= #$../../CrewCapacity$
			FlowMode = STAGE_PRIORITY_FLOW
		}

		OUTPUT_RESOURCE
		{
			ResourceName = FreshAir
			Ratio = 0.000074
			@Ratio *= #$../../CrewCapacity$
			FlowMode = ALL_VESSEL
		}
	}
}
@PART:HAS[#manufacturer[Brand?Aerospace?Engineering],@MODULE[Snack*],!MODULE[ModuleQualityControl]]:NEEDS[BARIS,SnacksFreshAir]:AFTER[Endurance]
{
	%MODULE[ModuleQualityControl]
	{
		quality = 65
		mtbf = 100 
		monitorConverters = true //WARNING: this is a performance hit.
	}
}